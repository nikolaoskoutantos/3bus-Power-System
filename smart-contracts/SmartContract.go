/*
 * GPT-Generated Source Code
 * This file is automatically generated by the GPT language model.
 * It may contain human-reviewed content, but its primary source is automated.
 * Any changes made manually may be overwritten.
 * For more information, refer to the GPT-3.5 documentation.
 * 
 * GDPR Compliance:
 * This code may include data generated by GPT-3.5, a language model developed by OpenAI.
 * Please ensure compliance with applicable data protection regulations, such as GDPR, when using this code.
 */

package main

import (
	"fmt"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	"github.com/hyperledger/fabric/protos/peer"
)

// CostFunctionChaincode is the chaincode structure
type CostFunctionChaincode struct {
}

// Init is called during chaincode instantiation to initialize any data.
func (cc *CostFunctionChaincode) Init(stub shim.ChaincodeStubInterface) peer.Response {
	fmt.Println("Chaincode initialized")
	return shim.Success(nil)
}

// Invoke is called per transaction on the chaincode.
func (cc *CostFunctionChaincode) Invoke(stub shim.ChaincodeStubInterface) peer.Response {
	function, args := stub.GetFunctionAndParameters()

	switch function {
	case "storeCostFunction":
		return cc.storeCostFunction(stub, args)
	case "getCostFunction":
		return cc.getCostFunction(stub, args)
	default:
		return shim.Error("Invalid function name. Supported functions: storeCostFunction, getCostFunction")
	}
}

// storeCostFunction stores the cost function on the ledger
func (cc *CostFunctionChaincode) storeCostFunction(stub shim.ChaincodeStubInterface, args []string) peer.Response {
	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1: cost function")
	}

	costFunction := args[0]

	err := stub.PutState("costFunction", []byte(costFunction))
	if err != nil {
		return shim.Error(fmt.Sprintf("Failed to store cost function: %s", err))
	}

	return shim.Success(nil)
}

// getCostFunction retrieves the cost function from the ledger
func (cc *CostFunctionChaincode) getCostFunction(stub shim.ChaincodeStubInterface, args []string) peer.Response {
	if len(args) != 0 {
		return shim.Error("Incorrect number of arguments. Expecting 0.")
	}

	costFunction, err := stub.GetState("costFunction")
	if err != nil {
		return shim.Error(fmt.Sprintf("Failed to retrieve cost function: %s", err))
	}

	return shim.Success(costFunction)
}

func main() {
	if err := shim.Start(new(CostFunctionChaincode)); err != nil {
		fmt.Printf("Error starting chaincode: %s", err)
	}
}
